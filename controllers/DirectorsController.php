<?php

namespace app\controllers;

use Yii;
    use yii\helpers\Url;
    use app\models\{InfoAboutSchool, Schools};


class DirectorsController extends AppController
{

    protected $_school, $_class;
    public $_count_students;

    public function init()
    {

        parent::init();

        $this->_school = Yii::$app->user->identity->school; // School of teacher
        $this->_class = Yii::$app->user->identity->class; // Class of teacher
        $this->_count_students = Schools::getCountOfAllStudentsBySchool($this->_school->id); // Count students of school


        Url::remember();

        if (Yii::$app->user->isGuest || Yii::$app->user->identity->type != 'director')
        {
            throw new \yii\web\NotFoundHttpException();
        }

        // END public function init();
    }

    public function actionIndex()
    {
    // 	$birthdays_array = \app\models\User::find()->select('id, name, type, email, birthday')->asArray()->where(['IS NOT', 'birthday', NULL])->all();
        
    //     $curl = new \linslin\yii2\curl\Curl();
    //     $unixtimestamp = time();
    //     foreach($birthdays_array as $key => $value) :
    //         $result = myDateDiff($value['birthday'], $unixtimestamp);
    //         if ($result == '0')  {
    //             $check = \app\models\CronTabsBirthdays::findOne(['user_id' => $value['id'], 'type_of_record' => 'today']);

    //             $birthday = $value['birthday'];
    //             $user = \app\models\User::findOne($value['id']);
    //             $name = $user->name;
    //             $telegram_id = $user->telegram->telegram_chat_id;

    //             if (!empty($telegram_id))
    //             {
	   //              $__text = urlencode("–í—ñ—Ç–∞—î–º–æ, <b>" . $name . "</b>! üéÇüéâ \n–°—å–æ–≥–æ–¥–Ω—ñ —É –í–∞—Å –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è <b>(" . age($birthday) . ")</b>.\n–ë–∞–∂–∞—î–º–æ –í–∞–º –≤—Å—å–æ–≥–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —ñ –ø—Ä–∏—î–º–Ω–∏—Ö –µ–º–æ—Ü—ñ–π.\n\n–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ <b>School Diary</b> ¬©");

	   //              if ($value['type'] == 'student')
	   //              {
	   //                  $response = $curl->get('https://api.telegram.org/bot' . Yii::$app->params['telegramBotStudentsToken'] . '/sendMessage?text=' . $__text . '&chat_id=' . $telegram_id . '&parse_mode=HTML');
	   //              } elseif ($value['type'] == 'director')
	   //              {
	   //                  $response = $curl->get('https://api.telegram.org/bot' . Yii::$app->params['telegramBotStudentsToken'] . '/sendMessage?text=' . $__text . '&chat_id=' . $telegram_id . '&parse_mode=HTML');
	   //              } elseif ($value['type'] == 'teacher')
	   //              {
	   //                  $response = $curl->get('https://api.telegram.org/bot' . Yii::$app->params['telegramBotStudentsToken'] . '/sendMessage?text=' . $__text . '&chat_id=' . $telegram_id . '&parse_mode=HTML');
	   //              }
    //             }

				// $to   = $user['email'];
				// $from = Yii::$app->params['supportEmail'];

    //             $mail = Yii::$app->mailer->compose('birthday', compact('name', 'birthday'))
	   //              ->setFrom([$from => '–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ School Diary'])
	   //              ->setTo($to)
	   //              ->setSubject('–ó –î–Ω–µ–º –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –í–∞—Å!!!')
	   //              ->send();

    //         }
    //     endforeach;

    //     die;

        $this->setMeta('–î–∏—Ä–µ–∫—Ç–æ—Ä —à–∫–æ–ª–∏');

        $school = InfoAboutSchool::findOne(['school_id' => $this->_school->id]);

        if (!$school['info']) {
            $school['info'] = '<i class="not-set">–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–∞–Ω—É —à–∫–æ–ª—É –≤—ñ–¥—Å—É—Ç–Ω—è. –©–æ–± –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —ó—ó, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: <a href="' . Url::to(['/directors/info-about-school/update']) . '">' . Url::base(true) . Url::to(['/directors/info-about-school/update']) . '</a></i>';
        }

        return $this->render('index', compact('school'));

        // END public function actionIndex();
    }

    // END class DirectorsController;
}
